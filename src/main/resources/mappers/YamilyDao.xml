<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.yamilymart.dao.YamilyDao">

    <insert id="admin_stock_product_add" parameterType="ProductDTO">
        insert into product(product_id, product_partnerid, product_name, product_price, product_image)
        values (#{product_id}, #{product_partnerid}, #{product_name}, #{product_price}, #{product_image})
    </insert>
    
    <insert id="admin_stock_add" parameterType="StockDTO">
        insert into stock(stock_productid, stock_remain, stock_type)
        values (#{product_id}, 0, 1)
    </insert>
    
    <update id="admin_stock_update_post" parameterType="ProductDTO">
        update product
        set product_price = #{product_price}, product_name = #{product_name}
	    <if test="product_image != null and product_image != ''">
	        , product_image = #{product_image}
	    </if>
        where product_id = #{product_id}
    </update>
    
    <select id="admin_order_list_search" parameterType="OrderSearchDTO">
    	select * from `order`, branch 
    	where `order`.order_sender = branch.branch_id
    	and `order`.order_status = #{status}
    	and order.order_type = 0
   		<if test="keyword != ''">
   			and branch.branch_name like concat('%',#{keyword},'%')
   		</if>
   		<if test="startDate1 != ''">
   			and `order`.order_date &gt;= #{startDate1}
   		</if>
   		<if test="startDate2 != ''">
   			and `order`.order_delivery &gt;= #{startDate2}
   		</if>
   		<if test="endDate1 != ''">
   			and `order`.order_date &lt;= #{endDate1}
   		</if>
   		<if test="endDate2 != ''">
   			and `order`.order_delivery &lt;= #{endDate2}
   		</if>
    </select>
    
    <update id="admin_order_approval">
    	update `order`
   		<if test="approval_type == 0">
   			set order_status = 1
   		</if>
   		<if test="approval_type == 1">
   			set order_status = 3
   		</if>
        where order_id = #{order_id}
    </update>
    
    <update id="admin_order_approval_decrease">
    	<foreach collection="list" item="item" separator=";">
	        update stock
	        set stock_remain = stock_remain - #{item.orderDetail_amount}
	        where stock_productid = #{item.orderDetail_productid}
	        and stock_type = 1
        </foreach>
    </update>
    
    <select id="admin_stock_list_search">
    	select * from `stock`, `product` 
    	where stock.stock_productid = product.product_id 
    	and stock.stock_type = 1
   		<if test="searchType == 0">
   			and product.product_name like concat('%',#{keyword},'%')
   		</if>
   		<if test="searchType == 1">
   			and product.product_id like concat('%',#{keyword},'%')
   		</if>
    </select>
    
    
    <select id="admin_stock_partner">
    	select * 
    	from `partner`
   		<if test="keyword != ''">
   			where partner_name like concat('%',#{keyword},'%')
   		</if>
    </select>
    
    <select id="admin_order_detail">
		SELECT * 
		FROM `orderdetail`, `product`, `stock` 
		WHERE orderDetail_orderid = #{orderDetail_orderid}
		and orderdetail.orderDetail_productid = product.product_id
		and stock.stock_productid = orderdetail.orderDetail_productid
		and stock.stock_type = 1;
    </select>
    
    <select id="admin_sale_list">
		select 
		    SUM(sale.sale_sum) as sale_sum, 
		    sale.sale_branchid, 
		    DATE(sale.sale_date) as sale_date, 
		    branch.branch_name, 
		    branch.branch_id
		from 
		    sale
		join 
		    branch 
		on 
		    branch.branch_id = sale.sale_branchid
		group by
		    DATE(sale.sale_date), 
		    sale.sale_branchid, 
		    branch.branch_name, 
		    branch.branch_id;
    </select>
    
    <select id="admin_sale_list_search">
    	select 
		    SUM(sale.sale_sum) AS sale_sum, 
		    sale.sale_branchid, 
		    DATE(sale.sale_date) as sale_date, 
		    branch.branch_name, 
		    branch.branch_id
		from 
		    sale
		join 
		    branch 
		on 
		    branch.branch_id = sale.sale_branchid
		    <if test="keyword != ''">
	   			and branch.branch_name like concat('%',#{keyword},'%')
	   		</if>
	   		<if test="startDate != ''">
	   			and sale.sale_date &gt;= #{startDate}
	   		</if>
	   		<if test="endDate != ''">
	   			and sale.sale_date &lt;= #{endDate}
	   		</if>
		group by
		    DATE(sale.sale_date), 
		    sale.sale_branchid, 
		    branch.branch_name, 
		    branch.branch_id;
    </select>
    
    <select id="admin_sale_detail">
	    select sale.sale_productid, sale.sale_branchid, sum(sale_amount) sale_amount, sum(sale_sum) sale_sum, sale.sale_date,
	    product.product_name, product.product_price, partner.partner_name
		from sale, branch, partner, product
		where sale_branchid = #{sale_branchid}
		and date(sale.sale_date) = #{sale_date}
		and sale.sale_branchid = branch.branch_id 
		and sale.sale_productid = product.product_id 
		and product.product_partnerid = partner.partner_id
		group by sale.sale_productid, sale.sale_branchid, sale.sale_date
    </select>
    
    <select id="admin_main_orderStatus">
		select order_type, order_status, count(order_id) as count
		from `order`
		where order_type = 0
		group by order_status, order_type;
    </select>
    
    <select id="admin_main_prductSale">
		select sale.sale_productid, count(sale.sale_amount) as count, product.product_name, product.product_image, product.product_price, product.product_image
		from sale, product
		where sale.sale_productid = product.product_id
		group by sale_productid
		order by count desc;
    </select>
    
    <select id="admin_main_monthSale">
    SELECT 
		    FLOOR(SUM(sale_sum) / (SELECT COUNT(branch_code) FROM branch)) AS sale_sum,
		    MONTH(sale_date) AS sale_month,
		    YEAR(sale_date) AS sale_year
		FROM sale
		GROUP BY YEAR(sale_date), MONTH(sale_date)
		ORDER BY sale_year DESC, sale_month DESC
		LIMIT 6;
    <!--  
	    SELECT 
		    SUM(sale_sum) AS sale_sum,
		    MONTH(sale_date) AS sale_month,
		    YEAR(sale_date) AS sale_year
		FROM sale
		GROUP BY YEAR(sale_date), MONTH(sale_date)
		ORDER BY sale_year DESC, sale_month DESC
		LIMIT 6; -->
    </select>
    
        <select id="admin_main_branchSale">
			SELECT 
			    SUM(sale_sum) AS sale_sum,
			    MONTH(sale_date) AS sale_month,
			    YEAR(sale_date) AS sale_year,
			    sale.sale_branchid,
			    branch.branch_name
			FROM sale
			JOIN branch ON sale.sale_branchid = branch.branch_id
			WHERE YEAR(sale_date) = YEAR(NOW())
			  AND MONTH(sale_date) = MONTH(NOW())
			GROUP BY YEAR(sale_date), MONTH(sale_date), sale_branchid, branch.branch_name
			ORDER BY sale_sum DESC
    </select>
    

</mapper>