<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.yamilymart.dao.YamilyDao">

    <insert id="admin_stock_product_add" parameterType="ProductDTO">
        insert into product(product_id, product_partnerid, product_name, product_price, product_image)
        values (#{product_id}, #{product_partnerid}, #{product_name}, #{product_price}, #{product_image})
    </insert>
    
    <insert id="admin_stock_add" parameterType="StockDTO">
        insert into stock(stock_productid, stock_remain, stock_type)
        values (#{product_id}, 0, 1)
    </insert>
    
    <update id="admin_stock_update_post" parameterType="ProductDTO">
        update product
        set product_price = #{product_price}, product_name = #{product_name}
	    <if test="product_image != null and product_image != ''">
	        , product_image = #{product_image}
	    </if>
        where product_id = #{product_id}
    </update>
    
    <select id="admin_order_list_search" parameterType="map">
    	select * from `order`, branch 
    	where `order`.order_sender = branch.branch_id
    	and `order`.order_type = 0
    	
       <if test="keyword != '' and keyword != null">
   			and branch.branch_name like concat('%',#{keyword},'%')
   		</if>
   		<if test="startDate1 != '' and startDate1 != null">
   			and date(`order`.order_date) &gt;= #{startDate1}
   		</if>
   		<if test="startDate2 != '' and startDate2 != null">
   			and date(`order`.order_delivery) &gt;= #{startDate2}
   		</if>
   		<if test="endDate1 != '' and endDate1 != null">
   			and date(`order`.order_date) &lt;= #{endDate1}
   		</if>
   		<if test="endDate2 != '' and endDate2 != null">
   			and date(`order`.order_delivery) &lt;= #{endDate2}
   		</if>
   		<if test="status != '' and status != null">
   			and `order`.order_status = #{status}
   		</if>
   		
  		ORDER BY `order`.order_date DESC
   		LIMIT #{start}, #{pageSize}
    </select>
    
    <select id="countFilteredOrders" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM `order`, branch
        WHERE `order`.order_sender = branch.branch_id
        AND order_type = 0
          
       <if test="keyword != '' and keyword != null">
   			and branch.branch_name like concat('%',#{keyword},'%')
   		</if>
   		<if test="startDate1 != '' and startDate1 != null">
   			and date(`order`.order_date) &gt;= #{startDate1}
   		</if>
   		<if test="startDate2 != '' and startDate2 != null">
   			and date(`order`.order_delivery) &gt;= #{startDate2}
   		</if>
   		<if test="endDate1 != '' and endDate1 != null">
   			and date(`order`.order_date) &lt;= #{endDate1}
   		</if>
   		<if test="endDate2 != '' and endDate2 != null">
   			and date(`order`.order_delivery) &lt;= #{endDate2}
   		</if>
   		<if test="status != '' and status != null">
   			and `order`.order_status = #{status}
   		</if>
        
    </select>
    
    <update id="admin_order_approval">
    	update `order`
   		<if test="approval_type == 0">
   			set order_status = 1
   		</if>
   		<if test="approval_type == 1">
   			set order_status = 3
   		</if>
        where order_id = #{order_id}
    </update>
    
    <update id="admin_order_approval_decrease">
    	<foreach collection="list" item="item" separator=";">
	        update stock
	        set stock_remain = stock_remain - #{item.orderDetail_amount}
	        where stock_productid = #{item.orderDetail_productid}
	        and stock_type = 1
        </foreach>
    </update>
    
    <insert id="admin_order_approval_insert">
    	<foreach collection="list" item="item" separator=";">
	        insert into stock(stock_productid, stock_remain, stock_type, stock_branchid)
        	values (#{item.orderDetail_productid}, #{item.orderDetail_amount}, 0, #{item.username})
        </foreach>
    </insert>
    
    <update id="admin_order_approval_update">
    	<foreach collection="list" item="item" separator=";">
	        update stock
	        set stock_remain = stock_remain + #{item.orderDetail_amount}
	        where stock_productid = #{item.orderDetail_productid}
	        and stock_branchid = #{item.username}
	        and stock_type = 0
        </foreach>
    </update>
    
    <select id="admin_stock_list_search" parameterType="map">
    	select * from `stock`, `product` 
    	where stock.stock_productid = product.product_id 
    	and stock.stock_type = 1
   		<if test="searchType == 0">
   			and product.product_name like concat('%',#{keyword},'%')
   		</if>
   		<if test="searchType == 1">
   			and product.product_id like concat('%',#{keyword},'%')
   		</if>
   		ORDER BY `stock`.stock_id DESC
   		LIMIT #{start}, #{pageSize}
    </select>
    
    <select id="countFilteredStock" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM `stock`, `product`
        where stock.stock_productid = product.product_id 
        and stock_type = 1 
        and stock_del = 0  
   		<if test="searchType == 0">
   			and product.product_name like concat('%',#{keyword},'%')
   		</if>
   		<if test="searchType == 1">
   			and product.product_id like concat('%',#{keyword},'%')
   		</if>
        
    </select>
    
    
    <select id="admin_stock_partner">
    	select * 
    	from `partner`
   		<if test="keyword != ''">
   			where partner_name like concat('%',#{keyword},'%')
   		</if>
    </select>
    
    <select id="admin_order_detail">
		SELECT * 
		FROM `orderdetail`, `product`, `stock` 
		WHERE orderDetail_orderid = #{orderDetail_orderid}
		and orderdetail.orderDetail_productid = product.product_id
		and stock.stock_productid = orderdetail.orderDetail_productid
		and stock.stock_type = 1;
    </select>
    
     <select id="admin_sale_list" parameterType="map">
		select 
		    SUM(sale.sale_sum) as sale_sum, 
		    sale.sale_branchid, 
		    DATE(sale.sale_date) as sale_date, 
		    branch.branch_name, 
		    branch.branch_id
		from 
		    sale
		join 
		    branch 
		on 
		    branch.branch_id = sale.sale_branchid
		    <if test="keyword != '' and keyword != null">
	   			and branch.branch_name like concat('%',#{keyword},'%')
	   		</if>
	   		<if test="startDate != '' and startDate != null">
	   			and date(sale.sale_date) &gt;= #{startDate}
	   		</if>
	   		<if test="endDate != '' and endDate != null">
	   			and date(sale.sale_date) &lt;= #{endDate}
	   		</if>
		group by
		    DATE(sale.sale_date), 
		    sale.sale_branchid, 
		    branch.branch_name,
		    branch.branch_id
    </select>
    
    <select id="admin_sale_list_search" parameterType="map">
    	select 
		    SUM(sale.sale_sum) AS sale_sum, 
		    sale.sale_branchid, 
		    DATE(sale.sale_date) as sale_date, 
		    branch.branch_name, 
		    branch.branch_id
		from 
		    sale
		join 
		    branch 
		on 
		    branch.branch_id = sale.sale_branchid
		    <if test="keyword != '' and keyword != null">
	   			and branch.branch_name like concat('%',#{keyword},'%')
	   		</if>
	   		<if test="startDate != '' and startDate != null">
	   			and date(sale.sale_date) &gt;= #{startDate}
	   		</if>
	   		<if test="endDate != '' and endDate != null">
	   			and date(sale.sale_date) &lt;= #{endDate}
	   		</if>
		group by
		    DATE(sale.sale_date), 
		    sale.sale_branchid, 
		    branch.branch_name, 
		    branch.branch_id
		ORDER BY DATE(sale.sale_date) DESC
		LIMIT #{start}, #{pageSize}
    </select>
    
    <select id="countFilteredSale" parameterType="map" resultType="int">
        select count(*)
        from (
	        select
				date(sale_date),
	            sale_branchid
			from sale, branch
			where branch.branch_id = sale.sale_branchid
		    <if test="keyword != '' and keyword != null">
	   			and branch.branch_name like concat('%',#{keyword},'%')
	   		</if>
	   		<if test="startDate != '' and startDate != null">
	   			and date(sale.sale_date) &gt;= #{startDate}
	   		</if>
	   		<if test="endDate != '' and endDate != null">
	   			and date(sale.sale_date) &lt;= #{endDate}
	   		</if>
	        group by DATE(sale_date), 
			    sale_branchid
		    ) AS subquery
        
    </select>
    
    <select id="admin_sale_detail">
	    select sale.sale_productid, sale.sale_branchid, sum(sale_amount) sale_amount, sum(sale_sum) sale_sum, sale.sale_date,
	    product.product_name, product.product_price, partner.partner_name
		from sale, branch, partner, product
		where sale_branchid = #{sale_branchid}
		and date(sale.sale_date) = #{sale_date}
		and sale.sale_branchid = branch.branch_id 
		and sale.sale_productid = product.product_id 
		and product.product_partnerid = partner.partner_id
		group by sale.sale_productid, sale.sale_branchid, sale.sale_date
    </select>
    
    <select id="admin_main_orderStatus">
		select order_type, order_status, count(order_id) as count
		from `order`
		where order_type = 0
		group by order_status, order_type;
    </select>
    
    <select id="admin_main_prductSale">
		select sale.sale_productid, sum(sale.sale_amount) as count, product.product_name, product.product_image, product.product_price, product.product_image
		from sale, product
		where sale.sale_productid = product.product_id
		group by sale_productid
		order by count desc;
    </select>
    
    <select id="admin_main_monthSale">
    SELECT 
		    FLOOR(SUM(sale_sum) / (SELECT COUNT(branch_code) FROM branch)) AS sale_sum,
		    MONTH(sale_date) AS sale_month,
		    YEAR(sale_date) AS sale_year
		FROM sale
		GROUP BY YEAR(sale_date), MONTH(sale_date)
		ORDER BY sale_year DESC, sale_month DESC
		LIMIT 6;

    </select>
    
        <select id="admin_main_branchSale">
			SELECT 
			    SUM(sale_sum) AS sale_sum,
			    MONTH(sale_date) AS sale_month,
			    YEAR(sale_date) AS sale_year,
			    sale.sale_branchid,
			    branch.branch_name
			FROM sale
			JOIN branch ON sale.sale_branchid = branch.branch_id
			WHERE YEAR(sale_date) = YEAR(NOW())
			  AND MONTH(sale_date) = MONTH(NOW())
			GROUP BY YEAR(sale_date), MONTH(sale_date), sale_branchid, branch.branch_name
			ORDER BY sale_sum DESC
    </select>
    
    
    
    
    <!-- 
    //우진ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
  	//우진ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
  	//우진ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
     -->
    
	<!--본사 지점 목록 검색 필터-->
<select id="bList" parameterType="map" resultType="BranchDTO">
    SELECT * 
    FROM branch
    WHERE 1=1
  	<if test = "branch_name != ''">
  		AND branch_name LIKE CONCAT('%', #{branch_name}, '%')
	</if>
  	<if test = "branch_owner != ''">
		AND branch_owner LIKE CONCAT('%', #{branch_owner}, '%')
	</if>
  	<if test = "startDate != ''">
		 AND DATE(branch_regdate) &gt;= #{startDate}
	</if>
  	<if test = "endDate != ''">
		 AND DATE(branch_regdate) &lt;= #{endDate}
	</if>
	<if test = "branch_region != ''">
		AND branch_region LIKE CONCAT('%', #{branch_region}, '%')
	</if>
</select>

<!--본사 거래처 목록 검색 필터-->
<select id="pList" parameterType="map" resultType="PartnerDTO">
    SELECT * 
    FROM partner
    WHERE 1=1
  	<if test = "partner_name != ''">
  		AND partner_name LIKE CONCAT('%', #{partner_name}, '%')
	</if>
  	<if test = "partner_manager != ''">
		AND partner_manager LIKE CONCAT('%', #{partner_manager}, '%')
	</if>
	<if test = "partner_email != ''">
		AND partner_email LIKE CONCAT('%', #{partner_email}, '%')
	</if>
	<if test = "partner_phone != ''">
		AND partner_phone LIKE CONCAT('%', #{partner_phone}, '%')
	</if>
</select>

<select id="qList" parameterType="map" resultType="QuotationDTO">
    SELECT * 
    FROM quotation
    WHERE 1=1
    <if test="quotation_id != null and quotation_id != ''">
        AND quotation_id LIKE CONCAT('%', #{quotation_id}, '%')
    </if>
    <if test="quotation_partnername != null and quotation_partnername != ''">
        AND quotation_partnername LIKE CONCAT('%', #{quotation_partnername}, '%')
    </if>
    <if test="quotation_hqmanager != null and quotation_hqmanager != ''">
        AND quotation_hqmanager LIKE CONCAT('%', #{quotation_hqmanager}, '%')
    </if>
    <if test="startDate != null and startDate != ''">
        AND DATE(quotation_date) &gt;= #{startDate}
    </if>
    <if test="endDate != null and endDate != ''">
        AND DATE(quotation_date) &lt;= #{endDate}
    </if>
    <if test="searchType != null and searchType != ''">
        AND quotation_status = 
        <choose>
            <when test="searchType == 'considering'">0</when>
            <when test="searchType == 'holding'">1</when>
            <when test="searchType == 'completed'">2</when>
        </choose>
    </if>
    ORDER BY quotation_date DESC
    LIMIT #{start}, #{pageSize}
</select>

<!--검색 조건에 따라 전체 데이터 개수 반환-->
<select id="adminCountFilteredOrders" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM `order`
        WHERE 1=1
          AND order_type = 1
        <if test="order_id != null and order_id.trim() != ''">
            AND order_id LIKE CONCAT('%', #{order_id}, '%')
        </if>
        <if test="order_manager != null and order_manager.trim() != ''">
            AND order_manager LIKE CONCAT('%', #{order_manager}, '%')
        </if>
        <if test="searchType != null and searchType.trim() != ''">
            <if test="searchType == 'orderDate'">
                <if test="startDate != null and startDate.trim() != ''">
                    AND DATE(order_date) >= #{startDate}
                </if>
                <if test="endDate != null and endDate.trim() != ''">
                    AND DATE(order_date) &lt;= #{endDate}
                </if>
            </if>
            <if test="searchType == 'requestDate'">
                <if test="startDate != null and startDate.trim() != ''">
                    AND DATE(order_delivery) >= #{startDate}
                </if>
                <if test="endDate != null and endDate.trim() != ''">
                    AND DATE(order_delivery) &lt;= #{endDate}
                </if>
            </if>
        </if>
    </select>

    <!-- 페이징 처리된 데이터 조회 -->
    <select id="filterAndPaginateOrders" parameterType="map" resultType="OrderDTO">
        SELECT *
        FROM `order`
        WHERE 1=1
          AND order_type = 1
        <if test="order_id != null and order_id.trim() != ''">
            AND order_id LIKE CONCAT('%', #{order_id}, '%')
        </if>
        <if test="order_manager != null and order_manager.trim() != ''">
            AND order_manager LIKE CONCAT('%', #{order_manager}, '%')
        </if>
        <if test="order_manager != null and order_manager.trim() != ''">
            AND order_manager LIKE CONCAT('%', #{order_manager}, '%')
        </if>
        <if test="searchType != null and searchType.trim() != ''">
            <if test="searchType == 'orderDate'">
                <if test="startDate != null and startDate.trim() != ''">
                    AND DATE(order_date) >= #{startDate}
                </if>
                <if test="endDate != null and endDate.trim() != ''">
                    AND DATE(order_date) &lt;= #{endDate}
                </if>
            </if>
            <if test="searchType == 'requestDate'">
                <if test="startDate != null and startDate.trim() != ''">
                    AND DATE(order_delivery) >= #{startDate}
                </if>
                <if test="endDate != null and endDate.trim() != ''">
                    AND DATE(order_delivery) &lt;= #{endDate}
                </if>
            </if>
        </if>
        ORDER BY order_date DESC
        LIMIT #{start}, #{pageSize}
    </select>
    
    <!--검색 조건에 따라 전체 데이터 개수 반환-->
	<select id="countFilteredQuotations" parameterType="map" resultType="int">
	    SELECT COUNT(*)
	    FROM quotation
	    WHERE 1=1
	    
	    <if test="quotation_id != null and quotation_id != ''">
	        AND quotation_id LIKE CONCAT('%', #{quotation_id}, '%')
	    </if>
	    <if test="quotation_partnername != null and quotation_partnername != ''">
	        AND quotation_partnername LIKE CONCAT('%', #{quotation_partnername}, '%')
	    </if>
	    <if test="quotation_hqmanager != null and quotation_hqmanager != ''">
	        AND quotation_hqmanager LIKE CONCAT('%', #{quotation_hqmanager}, '%')
	    </if>
	    <if test="startDate != null and startDate != ''">
	        AND DATE(quotation_date) &gt;= #{startDate}
	    </if>
	    <if test="endDate != null and endDate != ''">
	        AND DATE(quotation_date) &lt;= #{endDate}
	    </if>
	    <if test="searchType != null and searchType != ''">
	        AND quotation_status = 
	        <choose>
	            <when test="searchType = 'considering'">0</when>
	            <when test="searchType = 'holding'">1</when>
	            <when test="searchType = 'completed'">2</when>
	        </choose>
	    </if>
	</select>
    
    <!-- 페이징 처리된 데이터 조회 -->
	<select id="filterAndPaginateQuotations" parameterType="map" resultType="QuotationDTO">
	    SELECT *
	    FROM quotation
	    WHERE 1=1
	    <if test="quotation_id != null and quotation_id != ''">
	        AND quotation_id LIKE CONCAT('%', #{quotation_id}, '%')
	    </if>
	    <if test="quotation_partnername != null and quotation_partnername != ''">
	        AND quotation_partnername LIKE CONCAT('%', #{quotation_partnername}, '%')
	    </if>
	    <if test="quotation_hqmanager != null and quotation_hqmanager != ''">
	        AND quotation_hqmanager LIKE CONCAT('%', #{quotation_hqmanager}, '%')
	    </if>
	    <if test="startDate != null and startDate != ''">
	        AND DATE(quotation_date) &gt;= #{startDate}
	    </if>
	    <if test="endDate != null and endDate != ''">
	        AND DATE(quotation_date) &lt;= #{endDate}
	    </if>
	    <if test="searchType != null and searchType != ''">
	        AND quotation_status = 
	        <choose>
	            <when test="searchType = 'considering'">0</when>
	            <when test="searchType = 'holding'">1</when>
	            <when test="searchType = 'completed'">2</when>
	        </choose>
	    </if>
	    ORDER BY quotation_date DESC
	    LIMIT #{start}, #{pageSize}
	</select>

    
    <!--검색 조건에 따라 전체 데이터 개수 반환-->
	<select id="countFilteredBranchs" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM branch
        WHERE 1=1
        <if test="branch_name != null and branch_name.trim() != ''">
            AND branch_name LIKE CONCAT('%', #{branch_name}, '%')
        </if>
        <if test="branch_owner != null and branch_owner.trim() != ''">
            AND branch_owner LIKE CONCAT('%', #{branch_owner}, '%')
        </if>
        <if test="branch_region != null and branch_region.trim() != ''">
            AND branch_region LIKE CONCAT('%', #{branch_region}, '%')
        </if>
        <if test="startDate != null and startDate != ''">
	        AND DATE(branch_regdate) &gt;= #{startDate}
	    </if>
	    <if test="endDate != null and endDate != ''">
	        AND DATE(branch_regdate) &lt;= #{endDate}
	    </if>
    </select>

    <!-- 페이징 처리된 데이터 조회 -->
    <select id="filterAndPaginateBranchs" parameterType="map" resultType="BranchDTO">
        SELECT *
        FROM branch
        WHERE 1=1
         <if test="branch_name != null and branch_name.trim() != ''">
            AND branch_name LIKE CONCAT('%', #{branch_name}, '%')
        </if>
        <if test="branch_owner != null and branch_owner.trim() != ''">
            AND branch_owner LIKE CONCAT('%', #{branch_owner}, '%')
        </if>
        <if test="branch_region != null and branch_region.trim() != ''">
            AND branch_region LIKE CONCAT('%', #{branch_region}, '%')
        </if>
        <if test="startDate != null and startDate != ''">
	        AND DATE(branch_regdate) &gt;= #{startDate}
	    </if>
	    <if test="endDate != null and endDate != ''">
	        AND DATE(branch_regdate) &lt;= #{endDate}
	    </if>
        ORDER BY branch_regdate DESC
        LIMIT #{start}, #{pageSize}
    </select>
    
    <!--검색 조건에 따라 전체 데이터 개수 반환-->
	<select id="countFilteredPartners" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM `partner`
        WHERE 1=1
        <if test="partner_name != null and partner_name.trim() != ''">
            AND partner_name LIKE CONCAT('%', #{partner_name}, '%')
        </if>
        <if test="partner_manager != null and partner_manager.trim() != ''">
            AND partner_manager LIKE CONCAT('%', #{partner_manager}, '%')
        </if>
        <if test="partner_email != null and partner_email.trim() != ''">
            AND partner_email LIKE CONCAT('%', #{partner_email}, '%')
        </if>
         <if test="partner_phone != null and partner_phone.trim() != ''">
            AND partner_phone LIKE CONCAT('%', #{partner_phone}, '%')
        </if>
    </select>

    <!-- 페이징 처리된 데이터 조회 -->
    <select id="filterAndPaginatePartners" parameterType="map" resultType="PartnerDTO">
        SELECT *
        FROM `partner`
        WHERE 1=1
        <if test="partner_name != null and partner_name.trim() != ''">
            AND partner_name LIKE CONCAT('%', #{partner_name}, '%')
        </if>
        <if test="partner_manager != null and partner_manager.trim() != ''">
            AND partner_manager LIKE CONCAT('%', #{partner_manager}, '%')
        </if>
        <if test="partner_email != null and partner_email.trim() != ''">
            AND partner_email LIKE CONCAT('%', #{partner_email}, '%')
        </if>
         <if test="partner_phone != null and partner_phone.trim() != ''">
            AND partner_phone LIKE CONCAT('%', #{partner_phone}, '%')
        </if>
        LIMIT #{start}, #{pageSize}
    </select>
	
	
	
	
	
	<!-- 
	//현주ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
    //현주ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
    //현주ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 
    -->
	
	<insert id="addStaff" parameterType="StaffDTO">
    	insert into hr
    	(hr_id, hr_authority, hr_name, hr_joindate, hr_grade, hr_pdo, hr_sybname, hr_oriname)
    	values
    	(#{hr_id}, #{hr_authority}, #{hr_name}, #{hr_joindate}, #{hr_grade}, 15, #{hr_sybname}, #{hr_oriname})
    </insert>

	<update id="staffEdit" parameterType="StaffDTO">
		update hr set hr_grade = #{hr_grade},hr_pdo = #{hr_pdo},
		hr_sybname = #{hr_sybname}, hr_oriname = #{hr_oriname} where hr_code = #{hr_code}
	</update>
	
	<select id="staffSearch" parameterType="map" resultType="StaffDTO">
		select * from hr
		<where>
		<if test="staff_search !='' and staff_search != null">
			 hr_name like concat('%',#{staff_search},'%')
		</if>
		<if test="grade != null">
			 and hr_grade = #{grade}
		</if>
		<if test="start !='' and end != ''">
			 and hr_joindate between #{start} and #{end}
		</if>
		<if test="auth != null">
			 and hr_authority = #{auth}
		</if>
		<if test="del != null">
			 and hr_del = 0
		</if>
		</where>
		order by hr_code
	</select>
	
	<!-- temporary login -->
	<select id="login" parameterType="java.util.Map" resultType="StaffDTO">
    	select * from hr where hr_id=#{hr_id} and hr_pwd=#{hr_pwd}
	</select>
	
	<insert id="addApproval" parameterType="ApprovalDTO">
		insert into approval (hr_code, app_title, app_cat, app_info, app_file, boss_code, app_datestart, app_dateend) 
		values (#{hr_code}, #{app_title}, #{app_cat}, #{app_info}, #{app_file}, #{boss_code}, #{app_datestart}, #{app_dateend})
	</insert>
	
	<select id="bossList" parameterType = "java.lang.Integer"  resultType="StaffDTO">
	SELECT * 
	FROM hr 
	WHERE hr_authority = #{hr_authority} + 1
	OR (#{hr_authority} = 7 AND hr_authority in (6,7));
	</select>	
	
	<select id="bossSearch" resultType="StaffDTO">
	SELECT * 
	FROM hr 
	WHERE hr_name like concat('%',#{hr_name},'%')
	AND hr_authority = #{hr_authority} + 1
	OR (#{hr_authority} = 7 AND hr_authority in (6,7));
	</select>
	
	<select id="appList" resultType="ApprovalDTO">
    SELECT * FROM approval
    WHERE hr_code = #{hr_code}
    ORDER BY app_date DESC
</select>

	
	<select id="appDetail" parameterType="java.lang.Integer" resultType="ApprovalDTO">
		select * from approval left join hr on hr.hr_code = approval.hr_code where approval.app_id = #{app_id}
	</select>
	
	<select id="appListBoss" parameterType="map" resultType="ApprovalDTO">
	SELECT * 
	FROM approval
	LEFT JOIN hr ON hr.hr_code = approval.boss_code
	WHERE 
    (approval.boss_code = #{hr_code} AND approval.boss_code_second = 0)
    OR (approval.boss_code = #{hr_code} OR approval.boss_code_second = #{hr_code})
	ORDER BY 
    CASE 
        WHEN approval.app_status = 2 THEN 0
        ELSE 1
    END,
    approval.app_status
	</select>
	
		<select id="CountListBoss"> 
SELECT COUNT(*) 
FROM approval
LEFT JOIN hr ON hr.hr_code = approval.boss_code
WHERE 
    (approval.boss_code = #{hr_code} AND approval.boss_code_second = 0)
    OR approval.boss_code_second = #{hr_code}
</select>

	
	<update id="bossView" parameterType="java.lang.Integer">
		update approval set app_view = 1 where app_id = #{app_id}
	</update>
	
	<update id="cancelApproval" parameterType="java.util.Map">
		update approval set app_status = 1, app_rejection=#{app_rejection} where app_id = #{app_id}
	</update>
	
	<update id="approveApproval" parameterType = "java.util.Map">
		UPDATE approval
		SET 
    	app_status = CASE 
        	WHEN boss_code_second != 0 AND app_id = #{app_id} THEN 3
        	WHEN boss_code_second = 0 AND app_id = #{app_id} THEN 2
            ELSE app_status
            END,
    	boss_code_second = CASE 
            WHEN boss_code_second = 0 AND app_id = #{app_id} THEN #{boss_code_second}
            ELSE boss_code_second
            END,
        app_view = CASE
        	WHEN app_status != 3 THEN 0
        	WHEN app_status = 3 THEN 1
        	END
		WHERE app_id = #{app_id};
	</update>
	
	<update id="pdoApproval" parameterType="java.lang.Integer">
		UPDATE hr 
		JOIN approval ON hr.hr_code = approval.hr_code
		SET
		    hr_pdo = CASE
		        WHEN approval.app_cat = 0 THEN hr.hr_pdo - DATEDIFF(approval.app_dateend, approval.app_datestart)
		        WHEN approval.app_cat = 1 THEN hr.hr_pdo - DATEDIFF(approval.app_dateend, approval.app_datestart)
		        WHEN approval.app_cat = 2 THEN 0
		        WHEN approval.app_cat = 3 THEN hr.hr_pdo
		        ELSE hr.hr_pdo
		    END,
		    hr_del = CASE
		        WHEN approval.app_cat = 2 THEN 1
		        ELSE hr_del
		    END
		WHERE hr.hr_code = (SELECT hr_code FROM approval WHERE app_id = #{app_id});
	</update>
	
	<select id="calendar" resultType="ApprovalDTO">
		select app_id, hr_code, app_title, app_datestart, app_dateend from approval where app_status = 3
	</select>
	
	<!-- 
	//준혁ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
    //준혁ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
    //준혁ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 
    -->
	
	<!-- 점주 홈 화면 발주상태 띄우기 -->
	<select id="homeOrder" resultType="OrderDTO">
		SELECT
			order_status,
			COUNT(*) AS count
		FROM
			`order`
		WHERE 
			order_sender = #{username}
		GROUP BY
			order_status
		
	</select>
	<select id="homeSale" resultType="SaleDTO">
		SELECT
			product.product_image,
			product.product_name,
			product.product_price,
			SUM(sale.sale_amount) AS sum_amount
		FROM
			`sale`,`product`
		WHERE
			sale.sale_productid = product.product_id AND
			sale_branchid = #{username}
		GROUP BY
			sale.sale_productid, product.product_name, product.product_price
		ORDER BY SUM(sale.sale_amount) desc;
	</select>
	<select id="homeToday" resultType="SaleDTO">
		SELECT *
		FROM `sale`, `product`
		WHERE DATE(sale_date) = CURDATE() AND sale.sale_productid = product.product_id AND sale.sale_branchid = #{username}
		ORDER BY sale_date ASC	
	
	
	</select>
	
	
	<select id="homeMonth" resultType="SaleDTO">
		SELECT
			SUM(sale_sum) AS sale_sum,
			MONTH(sale_date),
			YEAR(sale_date)
		FROM
			`sale`
		WHERE
			sale_branchid = #{username}
		GROUP BY
			MONTH(sale_date),YEAR(sale_date)
		ORDER BY
			MONTH(sale_date) DESC ,YEAR(sale_date) DESC
	</select>
	
	
	
		
		

	<!-- 물품 요청목록 검색 -->
	<select id="orderList" parameterType="map" resultType="OrderDTO">
		SELECT * FROM `order` WHERE order_type = 0 AND order_sender = #{username}
				<if test="startDate != null and startDate.trim() != ''">
				    AND DATE(order_date) &gt;= #{startDate}
				</if>
				<if test="endDate != null and endDate.trim() != ''">
				    AND DATE(order_date) &lt;= #{endDate}
				</if>
				<if test="startDate_2 != null and startDate_2.trim() != ''">
				    AND DATE(order_delivery) &gt;= #{startDate_2}
				</if>
				<if test="endDate_2 != null and endDate_2.trim() != ''">
				    AND DATE(order_delivery) &lt;= #{endDate_2}
				</if>
				<if test="orderstatus != null and orderstatus.trim() != ''">
				    AND order_status = #{orderstatus}
				</if>
				ORDER BY order_date DESC
	    		LIMIT #{start}, #{pageSize}
	</select>
	
	
	<!-- 검색된 주문 개수 조회 -->
	<select id="userCountFilteredOrders" parameterType="map" resultType="int">
	    SELECT COUNT(*)
	    FROM `order`
	    WHERE order_type = 0
	    AND order_sender = #{username}
		<if test="startDate != null and startDate.trim() != ''">
	        AND DATE(order_date) &gt;= #{startDate}
	    </if>
	    <if test="endDate != null and endDate.trim() != ''">
	        AND DATE(order_date) &lt;= #{endDate}
	    </if>
	    <if test="startDate_2 != null and startDate_2.trim() != ''">
	        AND DATE(order_delivery) &gt;= #{startDate_2}
	    </if>
	    <if test="endDate_2 != null and endDate_2.trim() != ''">
	        AND DATE(order_delivery) &lt;= #{endDate_2}
	    </if>
	    <if test="orderstatus != null and orderstatus.trim() != ''">
	        AND order_status = #{orderstatus}
	    </if>
	</select>
	
	
		


	<!-- 물품 요청 보내기 -->
	<insert id="userInsertOrder" parameterType="OrderDTO" >
		INSERT INTO `order` (order_id, order_sender, order_date, order_amount, order_sum, order_type, order_status, order_manager, order_delivery, order_memo)
		VALUES (#{order_id}, #{order_sender}, now(), 0, #{order_sum}, 0, 0, #{order_manager}, #{order_delivery}, #{order_memo})
	</insert>
	
	<insert id="userInsertOrderDetail" parameterType="OrderDetailDTO">
    INSERT INTO `orderdetail` (orderDetail_orderid, orderDetail_productid, orderDetail_price, orderDetail_amount, orderDetail_sum)
    VALUES (#{orderDetail_orderid}, #{orderDetail_productid}, #{orderDetail_price}, #{orderDetail_amount}, #{orderDetail_sum})
	</insert>
	
	<update id="updateOrderAmount">
		UPDATE `order`
		SET order_amount = #{count}
		WHERE order_id = #{orderId}
	</update>
	
	
	
		<!-- 재고 목록 검색 -->
	<select id="inventory_manage" parameterType="map" resultType="StockDTO">
	    SELECT * FROM `stock`, `product` 
	    WHERE stock_branchid = #{username}
	    AND stock.stock_productid = product.product_id
	    <if test="searchKeyword != null and searchKeyword.trim() != ''">
	        AND product.product_name LIKE CONCAT('%', #{searchKeyword}, '%')
	    </if>
	    ORDER BY stock_id DESC
	    LIMIT #{start}, #{pageSize}
	</select>
	
	<!-- 검색된 재고 개수 조회 -->
	<select id="countFilteredInventory" parameterType="map" resultType="int">
	    SELECT COUNT(*) 
	    FROM `stock`, `product`
	    WHERE stock_branchid = #{username}
	    AND stock.stock_productid = product.product_id
	    <if test="searchKeyword != null and searchKeyword.trim() != ''">
	        AND product.product_name LIKE CONCAT('%', #{searchKeyword}, '%')
	    </if>
	</select>


	<!-- 점주 재고관리 수량 변경 구현 -->
	<update id="updateStock">
		UPDATE `stock`
		SET stock_remain = #{newStockRemain}
		WHERE stock_id = #{stockId}
	</update>



	<!-- 손님 구매 페이지 검색 구현 -->
	<select id="buy_manage" parameterType="map" resultType="StockDTO">
		SELECT * FROM `stock`, `product`
		WHERE stock.stock_branchid = #{username} AND stock.stock_productid = product.product_id
		<if test="searchKeyword != null and searchKeyword.trim() != ''">
        AND product.product_name LIKE CONCAT('%', #{searchKeyword}, '%')
	    </if>
	    ORDER BY stock_id DESC
	    LIMIT #{start}, #{pageSize} 
	</select>
	
	<!-- 검색된 구매 개수 조회 -->
	<select id="countFilteredBuy" parameterType="map" resultType="int">
	    SELECT COUNT(*) 
	    FROM `stock`, `product`
	    WHERE stock.stock_branchid = #{username}
	    AND stock.stock_productid = product.product_id
	    <if test="searchKeyword != null and searchKeyword.trim() != ''">
	        AND product.product_name LIKE CONCAT('%', #{searchKeyword}, '%')
	    </if>
	</select>
	
	
	<!-- 손님 구매 페이지 구매 구현 -->
	<insert id="insertSale" parameterType="SaleDTO">
		INSERT INTO `sale` (sale_branchid, sale_productid, sale_amount, sale_date, sale_sum)
		VALUES (#{username},#{sale_productid},#{sale_amount},now(),#{sale_sum})
	</insert>
	<update id="updateStockRemain" parameterType="map">
		UPDATE `stock`
		SET stock_remain = stock_remain - #{quantity}
		WHERE stock_productid = #{productId} AND stock_branchid = #{username}
	</update>
	<select id="getStockQuantity" parameterType="map" resultType="int">
		SELECT stock_remain
		FROM `stock`
		WHERE stock_productid = #{productId} AND stock_branchid = #{username}
	</select>
	
	
	
	<!-- 점주 판매 현황 페이지 검색 구현 -->
	<select id="sales_manage" parameterType="map" resultType="SaleDTO">
    SELECT sale_date, SUM(sale_amount) AS sale_amount, SUM(sale_sum) AS sale_sum
    FROM (
        SELECT DATE(sale_date) AS sale_date, sale_amount, sale_sum
        FROM sale
        WHERE sale_branchid = #{username}
         <if test="startDate != null and startDate != ''">
            AND DATE(sale_date) &gt;= #{startDate}
        </if>
        <if test="endDate != null and endDate != ''">
            AND DATE(sale_date) &lt;= #{endDate}
        </if>
    ) AS filtered_sales
    GROUP BY sale_date
    ORDER BY sale_date DESC
    LIMIT #{pageSize} OFFSET #{start} 
	</select>
		
		<!-- 검색된 판매 개수 조회 -->
	<select id="userCountFilteredSale" parameterType="map" resultType="int">
	    SELECT COUNT(*) FROM (
	        SELECT DISTINCT DATE(sale_date)
	        FROM sale
	        WHERE sale_branchid = #{username}
	        <if test="startDate != null and startDate != ''">
	            AND DATE(sale_date) &gt;= #{startDate}
	        </if>
	        <if test="endDate != null and endDate != ''">
	            AND DATE(sale_date) &lt;= #{endDate}
	        </if>
	    ) AS filtered_sales
	</select>
	
	
	
	
	<!-- 점주 판매 현황 페이지 상세보기 구현 -->
	<select id="getSalesDetail" parameterType="map" resultType="SaleDTO">
		SELECT *
		FROM `sale`, `product`
		WHERE DATE(sale_date) = #{saleDate} AND sale.sale_productid = product.product_id AND sale.sale_branchid = #{username}
		ORDER BY sale_date ASC	
	</select>

    

</mapper>